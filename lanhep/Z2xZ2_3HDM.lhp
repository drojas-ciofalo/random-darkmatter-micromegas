%
% Z_2 x Z_2 3HDM with 2 Inert and 1 Higgs Doublets
%


keys gauge_fixing=Feynman.

keys hgg=On.
keys CKMdim=3.

model 'Z2Z2 3HDM'/1.

option ReduceGamma5=0.
option chepPDWidth=216.
let g5=gamma5.
use z2z2_tex.

prtcformat fullname: 
'Full Name                 ', name:'  p  ', aname:'  ap  ', pdg:'    PDG ID    ', 
spin2:'2*spin', mass:' mass ',width:'   width    ', 
color, aux, texname:'>          LaTeX(A)         <', atexname:'>          LaTeX(A+)           < ' .

%%%%%%%%%%%%%% INDEPNDENT PARAMETERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%

parameter  	pi=acos(-1),
 		alphaSMZ=0.1184:'Srtong alpha(MZ) for running mass calculation',
 		EE =0.31343:    'elecromagnetic constant',
  		Q  = 100:       'QCD scale'.

parameter   	Mm = 0.1057:	'muon mass',
 		Mtau = 1.777:	'tau-lepton mass',
		Mu = 0.002,
 		Md = 0.005,
		Ms = 0.200,
  		McMc =1.23:	'Mc(Mc)  MS-BAR',
		MbMb =4.25:	'Mb(Mb)  MS-BAR',
 		Mtop = 172.5:	't-quark pole mass',
 		Mh   = 125:	'higgs mass',
 		MZ = 91.188:    'Z-boson mass',
 		MW = 80.385:    'W-boson mass',
 		wtop = 1.59:	't-quark width (tree level 1->2x)',
 		wZ = 2.49444:   'Z-boson width        (tree level 1->2x)',
 		wW = 2.08895:   'W-boson width        (tree level 1->2x)',
		Maux=1.
				
parameter       s12 = 0.221: 	'Parameter of C-K-M matrix (PDG-94)',
	   	s23 = 0.040: 	'Parameter of C-K-M matrix (PDG-94)',
           	s13 = 0.0035  : 'Parameter of C-K-M matrix (PDG-94)'.


%%%%%%%%%%%%%% INPUT PARAMETERS FOR INERT SECTOR %%%%%%%%%%%%%%%%%%%%%%%%%%%%


parameter MHX=111,MH3=222,MHC=333.
parameter MCX=1111,MC3=1222,MCC=1333.
parameter La3=0.01, La2=0.01.


%%%%%%%%%%%%%% DEPNDENT PARAMETERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%
external_func(alphaQCD,1).

parameter GG=sqrt(4*pi*alphaQCD(Q)).
 
parameter  	Mcp 	= McMc*(1+4/3*alphaQCD(McMc)/pi):'1 loop formula like in Hdecay',
	   	Mbp 	= MbMb*(1+4/3*alphaQCD(MbMb)/pi):'1 loop formula like in Hdecay',
		alphaE0	=1/137.036:'electromagnetic constant at zero energy',
		CW = MW/MZ:  		'on-shell cos of the Weinberg angle',
		SW = sqrt(1-CW**2): 	'sin of the Weinberg angle',
		GF = EE**2/(2*SW*MW)**2/Sqrt2: 'Fermi Constant',
		vv=2*MW/EE*SW.

parameter  	c12  = sqrt(1-s12**2): 	'parameter  of C-K-M matrix',
           	c23  = sqrt(1-s23**2): 	'parameter  of C-K-M matrix',
           	c13  = sqrt(1-s13**2): 	'parameter  of C-K-M matrix'.
	  
external_func(initQCD5,4). 
parameter LamQCD=initQCD5(alphaSMZ,McMc,MbMb,Mtop).

external_func(MbEff,1). 
external_func(MtEff,1). 
external_func(McEff,1). 

parameter	Mb=MbEff(Q),
		Mt=MtEff(Q),
		Mc=McEff(Q).

%%%%%%%%%%%%%% CKM MATRIX %%%%%%%%%%%%%%%%%%%%%%%%%%%%
		   
do_if CKMdim==3.
parameter  Vud = c12*c13                : 'C-K-M matrix element',
           Vus = s12*c13                : 'C-K-M matrix element',
           Vub = s13     	            : 'C-K-M matrix element',
           Vcd = (-s12*c23-c12*s23*s13) : 'C-K-M matrix element',
           Vcs = (c12*c23-s12*s23*s13)  : 'C-K-M matrix element',
           Vcb = s23*c13                : 'C-K-M matrix element',
           Vtd = (s12*s23-c12*c23*s13) 	: 'C-K-M matrix element',
           Vts = (-c12*s23-s12*c23*s13)	: 'C-K-M matrix element',
           Vtb = c23*c13  	            : 'C-K-M matrix element'.
OrthMatrix( { {Vud,Vus,Vub}, {Vcd,Vcs,Vcb}, {Vtd,Vts,Vtb}} ).

alias ckm(1,1)=Vud, ckm(2,1)=Vus, ckm(3,1)=Vub,
      ckm(1,2)=Vcd, ckm(2,2)=Vcs, ckm(3,2)=Vcb,
      ckm(1,3)=Vtd, ckm(2,3)=Vts, ckm(3,3)=Vtb.

do_else_if CKMdim==2.
parameter  Vud = c12            : 'C-K-M matrix element',
           Vus = s12    	    : 'C-K-M matrix element',
           Vcs = Vud     	    : 'C-K-M matrix element',
           Vcd = -Vus           : 'C-K-M matrix element'.
let        Vub = 0, Vcb = 0, Vtd = 0, Vts = 0, Vtb = 1.
OrthMatrix({{Vud,Vus}, {Vcd,Vcs}}).

do_else_if CKMdim==1.
let  Vub=0, Vcb=0, Vtd=0, Vts=0, Vtb=1, Vud=1, Vus=0, Vcs=1, Vcd=0.
end_if.

%%%%%%%%%%%%%% FIELD CONTENT - SM %%%%%%%%%%%%%%%%%%%%%%%%%%%%


do_if gauge_fixing==Feynman.

vector  
	A/A: (photon, gauge),
	Z/Z:('Z boson', mass MZ, width wZ, gauge),
	G/G: (gluon, color c8, gauge),
	'W+'/'W-': ('W boson', mass MW , width wW , gauge).

do_else.

vector  
	A/A: (photon, gauge),
	Z/Z:('Z boson', mass MZ, width wZ),
	G/G: (gluon, color c8, gauge),
	'W+'/'W-': ('W boson', mass MW, width wW).

end_if.

spinor 	ne/Ne:(neutrino,left), 	      e:(electron),
	nm/Nm:('mu-neutrino',left),   m:(muon, mass Mm),
	nl/Nl:('tau-neutrino',left),  l:('tau-lepton', mass Mtau).

spinor		u:('u-quark',color c3, mass Mu),
		d:('d-quark',color c3, mass Md),
		c:('c-quark',color c3, mass Mcp),
		s:('s-quark',color c3, mass Ms),
		t:('t-quark',color c3, mass Mtop, width wtop),
		b:('b-quark',color c3, mass Mbp).


let l1={ne,e}, L1={Ne,E}.
let l2={nm,m}, L2={Nm,M}.
let l3={nl,l}, L3={Nl,L}.

let q1={u,d}, Q1={U,D}, q1a={u,Vud*d+Vus*s+Vub*b}, Q1a={U,Vud*D+Vus*S+Vub*B}.
let q2={c,s}, Q2={C,S}, q2a={c,Vcd*d+Vcs*s+Vcb*b}, Q2a={C,Vcd*D+Vcs*S+Vcb*B}. 
let q3={t,b}, Q3={T,B}, q3a={t,Vtd*d+Vts*s+Vtb*b}, Q3a={T,Vtd*D+Vts*S+Vtb*B}.

let B1= -SW*Z+CW*A, W3=CW*Z+SW*A, W1=('W+'+'W-')/Sqrt2,
	 W2 = i*('W+'-'W-')/Sqrt2.

do_if gauge_fixing==Feynman.

let gh1 = ('W+.c'+'W-.c')/Sqrt2, gh2= i*('W+.c'-'W-.c')/Sqrt2,
		gh3= CW*'Z.c'+SW*'A.c', gh={gh1,gh2,gh3}.

let Gh1 = ('W+.C'+'W-.C')/Sqrt2, Gh2=i*('W+.C'-'W-.C')/Sqrt2, 
		Gh3= CW*'Z.C'+SW*'A.C', Gh={Gh1,Gh2,Gh3}. 

end_if.

let WW1 = {W1,  W2 , W3}, WW = {'W+',W3,'W-'}.

let g=EE/SW, g1=EE/CW.


%let  V=(2*MW/EE*SW).
%let V*EE=2*MW*SW.

%%%%%%%%%%%%%% FIELD CONTENT - 3HDM %%%%%%%%%%%%%%%%%%%%%%%%%%%%


scalar h/h:('Higgs', pdg 25, mass Mh, width wh = auto).
scalar '~H3'/'~H3':('1st neutral scalar',pdg 36, mass MH3, width wH3 = auto).
scalar '~H+'/'~H-':('1st charged scalar',pdg 37, mass MHC, width wHC=auto).
scalar '~X'/'~X'  :('1st DM', pdg 35,  mass MHX, width wHX=auto).
			
scalar '~~C3'/'~~C3':('2nd neutral scalar',pdg 45, mass MC3, width wC3 = auto).
scalar '~~C+'/'~~C-':('2nd charged scalar',pdg 46, mass MCC, width wCC=auto).
scalar '~~C'/'~~C'  :('2nd DM', pdg 47,  mass MCX, width wCX=auto).

%%%%%%%%%%%%%%%%%%%%%%%%%%%% LAGRANGIAN - SM %%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%% Gauge self-interactions

lterm -F**2/4   where 
	F=deriv^mu*B1^nu-deriv^nu*B1^mu.

lterm -F**2/4  where
	F=deriv^mu*G^nu^a-deriv^nu*G^mu^a+i*GG*f_SU3^a^b^c*G^mu^b*G^nu^c.

lterm -F**2/4  where
F=deriv^mu*WW1^nu^a-deriv^nu*WW1^mu^a -g*eps^a^b^c*WW1^mu^b*WW1^nu^c.


%%%%%%%%%%%%%%% left fermion interaction with gauge fields


lterm  	anti(psi)*gamma*(1-g5)/2*(i*deriv-g*taupm*WW/2-Y*g1*B1)*psi
		where 
			psi=l1,  Y=-1/2;
			psi=l2,  Y=-1/2;
			psi=l3,  Y=-1/2;
			psi=q1a, Y= 1/6;
			psi=q2a, Y= 1/6;
			psi=q3a, Y= 1/6.

%%%%%%%%%%%%%%% right fermion interaction with gauge fields

lterm  	anti(psi)*gamma*(1+g5)/2*(i*deriv - Y*g1*B1)*psi
		where 
			psi=e,Y= -1;
			psi=m,Y= -1;
			psi=l,Y= -1;
			psi=u, Y=  2/3;
			psi=c, Y=  2/3;
			psi=t, Y=  2/3;
			psi=d, Y= -1/3;
			psi=s, Y= -1/3;
			psi=b, Y= -1/3.

%%%%%%%%%%%%%%% quark-gluon interaction

lterm  GG*anti(psi)*lambda*gamma*G*psi where
	psi=q1; psi=q2; psi=q3.

%%%%%%%%%%%%%%% Yukawa interactions

do_if gauge_fixing==Feynman.

let pp = { -i*'W+.f',  (vev(2*MW/EE*SW)+h+i*'Z.f')/Sqrt2 }, 
    PP = {  i*'W-.f',  (vev(2*MW/EE*SW)+h-i*'Z.f')/Sqrt2 }.

do_else.

let pp = { 0,  (vev(2*MW/EE*SW)+h)/Sqrt2 }, 
    PP = { 0,  (vev(2*MW/EE*SW)+h)/Sqrt2 }.
    
end_if.


lterm  -M/MW/Sqrt2*g*(anti(pl)*(1+g5)/2*pr*pp + anti(pr)*(1-g5)/2*pl*PP )
    where
	M=Vud*Md,  pl=q1a, pr=d;           
	M=Vus*Ms,  pl=q1a, pr=s;
	M=Vub*Mb,  pl=q1a, pr=b;
	M=Vcd*Md,  pl=q2a, pr=d;
	M=Vcs*Ms,  pl=q2a, pr=s;
	M=Vcb*Mb,  pl=q2a, pr=b;
	M=Vtd*Md,  pl=q3a, pr=d;
	M=Vts*Ms,  pl=q3a, pr=s;
	M=Vtb*Mb,  pl=q3a, pr=b.


lterm  -M/MW/Sqrt2*g*(anti(pl)*(1+g5)/2*i*tau2*pr*PP 
		+ anti(pr)*(1-g5)/2*i*pl*tau2*pp ) 
 where
	M=Mu,  pl=q1a, pr=u;
	M=Mc,  pl=q2a, pr=c;
	M=Mtop,pl=q3a, pr=t.
	
%%%%%%%%%%%%%% 	electron is massless

lterm  -M/MW/Sqrt2*g*(anti(pl)*(1+g5)/2*pr*pp + anti(pr)*(1-g5)/2*pl*PP )
    where
	M=Mm,  pl=l2,  pr=m;
	M=Mtau,  pl=l3,  pr=l.



%%%%%%%%%%%%%% 	SM-Higgs doublet potential and kinetic terms

lterm -2*lambda*(pp*PP-v**2/2)**2  where 
	lambda=(g*Mh/MW)**2/16, v=2*MW*SW/EE.

let Dpp^mu^a = (deriv^mu+i*g1/2*B1^mu)*pp^a +
	 i*g/2*taupm^a^b^c*WW^mu^c*pp^b.

let DPP^mu^a = (deriv^mu-i*g1/2*B1^mu)*PP^a 
	-i*g/2*taupm^a^b^c*{'W-'^mu,W3^mu,'W+'^mu}^c*PP^b.

lterm DPP*Dpp.

%%%%%%%%%%%%%% 	Ghosts

lterm -i*GG*f_SU3*ccghost(G)*G^mu*deriv^mu*ghost(G).
lterm  -1/2*(deriv*G)**2.

do_if gauge_fixing==Feynman.

%lterm -g*eps*gh*WW1*deriv*Gh.

lterm g*eps*deriv*Gh*gh*WW1.


lterm  -1/2*(deriv*A)**2.


lterm  -1/2*(2*(deriv*'W+'+MW*'W+.f')*(deriv*'W-'+MW*'W-.f') +
	(deriv*Z+MW/CW*'Z.f')**2).


lterm -MW*EE/2/SW*((h+i*'Z.f')*('W-.C'*'W+.c' + 'W+.C'*'W-.c')
    		+h*'Z.C'*'Z.c'/CW**2-2*i*'Z.f'*'W+.C'*'W-.c').

lterm i*EE*MW/2/CW/SW*(
	'W+.f'*('W-.C'*'Z.c'*(1-2*SW**2)+'W-.c'*'Z.C'
			+2*CW*SW*'W-.C'*'A.c') -
	'W-.f'*('W+.C'*'Z.c'*(1-2*SW**2)+'W+.c'*'Z.C'
			+2*CW*SW*'W+.C'*'A.c')).
end_if.



%%%%%%%%%%%%%%%%%%%%%%%%%%%% LAGRANGIAN - INERT SECTOR %%%%%%%%%%%%%%%%


let qq = { '~H+',  ('~X'+i*'~H3')/Sqrt2 }, 
    QQ = {  '~H-',  ('~X'-i*'~H3')/Sqrt2 }.

let rr = { '~~C+',  ('~~C'+i*'~~C3')/Sqrt2 }, 
    RR = { '~~C-',  ('~~C'-i*'~~C3')/Sqrt2 }.

%let qq = { -i*'~H+',  ('~X'+i*'~H3')/Sqrt2 }, 
%    QQ = {  i*'~H-',  ('~X'-i*'~H3')/Sqrt2 }.

%let rr = { -i*'~~C+',  ('~~C'+i*'~~C3')/Sqrt2 }, 
%    RR = {  i*'~~C-',  ('~~C'-i*'~~C3')/Sqrt2 }.


%%%%%%%%%%%%%%%% 3HDM kinetic terms 

let Dqq^mu^a = (deriv^mu+i*g1/2*B1^mu)*qq^a +
	 i*g/2*taupm^a^b^c*WW^mu^c*qq^b.

let DQQ^mu^a = (deriv^mu-i*g1/2*B1^mu)*QQ^a 
	-i*g/2*taupm^a^b^c*{'W-'^mu,W3^mu,'W+'^mu}^c*QQ^b.

lterm DQQ*Dqq.


let Drr^mu^a = (deriv^mu+i*g1/2*B1^mu)*rr^a +
	 i*g/2*taupm^a^b^c*WW^mu^c*rr^b.

let DRR^mu^a = (deriv^mu-i*g1/2*B1^mu)*RR^a 
	-i*g/2*taupm^a^b^c*{'W-'^mu,W3^mu,'W+'^mu}^c*RR^b.

lterm DRR*Drr.



%%%%%%%%%%%%%%%%% 3HDM potential

parameter la11=0.1,la22=0.1,lam12=0.1,lam12p=0.1,La1=0.1.

parameter mu1=-MHX**2+La3*(2*MW/EE*SW)**2.
parameter lam3=(MHX**2-MH3**2)/(2*(2*MW/EE*SW)**2).
parameter lam13p=(MHX**2+MH3**2-2*MHC**2)/(2*MW/EE*SW)**2.
parameter lam13=2*La3-2*lam3-lam13p.

parameter mu2=-MCX**2+La2*(2*MW/EE*SW)**2.
parameter lam2=(MCX**2-MC3**2)/(2*(2*MW/EE*SW)**2).
parameter lam23p=(MCX**2+MC3**2-2*MCC**2)/(2*MW/EE*SW)**2.
parameter lam23=2*La2-2*lam2-lam23p.

parameter lam1=2*La1-lam12-lam12p.

lterm mu1*qq*QQ.

lterm mu2*rr*RR.

lterm -la11*(qq*QQ)**2.
lterm -la22*(rr*RR)**2.
lterm -lam12*(qq*QQ)*(rr*RR)-lam23*(rr*RR)*(pp*PP)-lam13*(pp*PP)*(qq*QQ).
lterm -lam12p*(qq*RR)*(rr*QQ)-lam23p*(rr*PP)*(pp*RR)-lam13p*(pp*QQ)*(qq*PP).
lterm -lam1*(qq*RR)**2-lam2*(rr*PP)**2-lam3*(qq*PP)**2+ AddHermConj.


SetAngle(1-SW**2=CW**2).
SetAngle(MW/CW=MZ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
%%%%%%%%%%%%%%%%%%%%%%% Hgg and Hgamma-gamma vertices %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   

do_if  hgg==On.


% Higgs effective vertices

external_func(hGGeven,*).
external_func(hAAeven,*).
external_func(hGGodd,*).
external_func(hAAodd,*).

external_func(MbRun,1).
external_func(MtRun,1).  

% Amplitudes 
			  
_p=[c,b,t,l] in   parameter ahF__p=CoefVrt([anti(_p),_p,h]) /(mass _p).

 parameter a_hV_W=CoefVrt(['W+','W-', h]) /MW**2,
 a_hS_Hc=CoefVrt(['~H+','~H-', h], [abbr]) /MHC**2,
 a_hS_Cc=CoefVrt(['~~C+','~~C-', h], [abbr]) /MCC**2.
        

parameter aQCD_h =alphaQCD(Mh)/pi.
parameter Rqcd_h=sqrt(1+ aQCD_h*(149/12+ aQCD_h*(68.6482-aQCD_h*212.447))).

parameter Quq=4/9, Qdq=1/9.

          
parameter LGGh=-cabs(hGGeven(Mh,aQCD_h,3,
   1,3,Mbp,ahF_b,
   1,3,Mcp,ahF_c,
   1,3,Mtop,ahF_t)).
   
parameter    LAAh=-cabs(
   Qdq*hAAeven(Mh,aQCD_h,1, 1,3,Mbp,ahF_b)+
   Quq*hAAeven(Mh,aQCD_h,2, 1,3,Mtop, ahF_t, 1,3,Mcp,ahF_c )+
       hAAeven(Mh,aQCD_h, 3,
       1,1,Mtau,ahF_l,
       2,1,MW,a_hV_W,
       0,1,MHC,a_hS_Hc,0,1,MCC,a_hS_Cc)).

let F_A^mu^nu=deriv^mu*A^nu-deriv^nu*A^mu.
let F_G^mu^nu^a=deriv^mu*G^nu^a-deriv^nu*G^mu^a.
let dF_G^mu^nu^a=i*GG*f_SU3^a^b^c*G^mu^b*G^nu^c.

lterm  Rqcd_h*LGGh*h*F_G*(F_G+2*dF_G).
lterm  LAAh*h*F_A**2.

clear F_G,F_A,dF_G.

end_if.

CheckMasses.
CheckHerm.
